// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.14.0
// source: attachment.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";
import { dateToReadable} from "../../grpc/util";
export const protobufPackage = "";

export interface Attachment {
  id: number;
  type: string;
  title: string;
  userId: number;
  forType: string;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface CreateAttachReq {
  userId: number;
  attachment: Attachment | undefined;
}

export interface CreateAttachRes {
  attachment: Attachment | undefined;
}

export interface GetAllAttachReq {
  entityId?: number | undefined;
}

export interface GetAllAttachRes {
  attachments: Attachment[];
}

export function createBaseAttachment(): Attachment {
  return { id: 0, type: "", title: "", userId: 0, forType: "", createdAt: undefined, updatedAt: undefined };
}

export const Attachment = {
  encode(message: Attachment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.userId !== 0) {
      writer.uint32(32).int32(message.userId);
    }
    if (message.forType !== "") {
      writer.uint32(42).string(message.forType);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Attachment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.forType = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attachment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      forType: isSet(object.forType) ? globalThis.String(object.forType) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Attachment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.forType !== "") {
      obj.forType = message.forType;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt =dateToReadable( message.createdAt.toISOString())
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt =dateToReadable( message.updatedAt.toISOString());
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attachment>, I>>(base?: I): Attachment {
    return Attachment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attachment>, I>>(object: I): Attachment {
    const message = createBaseAttachment();
    message.id = object.id ?? 0;
    message.type = object.type ?? "";
    message.title = object.title ?? "";
    message.userId = object.userId ?? 0;
    message.forType = object.forType ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseCreateAttachReq(): CreateAttachReq {
  return { userId: 0, attachment: undefined };
}

export const CreateAttachReq = {
  encode(message: CreateAttachReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.attachment !== undefined) {
      Attachment.encode(message.attachment, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateAttachReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAttachReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attachment = Attachment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAttachReq {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      attachment: isSet(object.attachment) ? Attachment.fromJSON(object.attachment) : undefined,
    };
  },

  toJSON(message: CreateAttachReq): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.attachment !== undefined) {
      obj.attachment = Attachment.toJSON(message.attachment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAttachReq>, I>>(base?: I): CreateAttachReq {
    return CreateAttachReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAttachReq>, I>>(object: I): CreateAttachReq {
    const message = createBaseCreateAttachReq();
    message.userId = object.userId ?? 0;
    message.attachment = (object.attachment !== undefined && object.attachment !== null)
      ? Attachment.fromPartial(object.attachment)
      : undefined;
    return message;
  },
};

function createBaseCreateAttachRes(): CreateAttachRes {
  return { attachment: undefined };
}

export const CreateAttachRes = {
  encode(message: CreateAttachRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.attachment !== undefined) {
      Attachment.encode(message.attachment, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateAttachRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAttachRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attachment = Attachment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAttachRes {
    return { attachment: isSet(object.attachment) ? Attachment.fromJSON(object.attachment) : undefined };
  },

  toJSON(message: CreateAttachRes): unknown {
    const obj: any = {};
    if (message.attachment !== undefined) {
      obj.attachment = Attachment.toJSON(message.attachment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAttachRes>, I>>(base?: I): CreateAttachRes {
    return CreateAttachRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAttachRes>, I>>(object: I): CreateAttachRes {
    const message = createBaseCreateAttachRes();
    message.attachment = (object.attachment !== undefined && object.attachment !== null)
      ? Attachment.fromPartial(object.attachment)
      : undefined;
    return message;
  },
};

function createBaseGetAllAttachReq(): GetAllAttachReq {
  return { entityId: undefined };
}

export const GetAllAttachReq = {
  encode(message: GetAllAttachReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entityId !== undefined) {
      writer.uint32(8).int32(message.entityId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllAttachReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAttachReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.entityId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAttachReq {
    return { entityId: isSet(object.entityId) ? globalThis.Number(object.entityId) : undefined };
  },

  toJSON(message: GetAllAttachReq): unknown {
    const obj: any = {};
    if (message.entityId !== undefined) {
      obj.entityId = Math.round(message.entityId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAttachReq>, I>>(base?: I): GetAllAttachReq {
    return GetAllAttachReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAttachReq>, I>>(object: I): GetAllAttachReq {
    const message = createBaseGetAllAttachReq();
    message.entityId = object.entityId ?? undefined;
    return message;
  },
};

function createBaseGetAllAttachRes(): GetAllAttachRes {
  return { attachments: [] };
}

export const GetAllAttachRes = {
  encode(message: GetAllAttachRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllAttachRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAttachRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAttachRes {
    return {
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => Attachment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllAttachRes): unknown {
    const obj: any = {};
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => Attachment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAttachRes>, I>>(base?: I): GetAllAttachRes {
    return GetAllAttachRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAttachRes>, I>>(object: I): GetAllAttachRes {
    const message = createBaseGetAllAttachRes();
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    return message;
  },
};

export type AttachmentServiceService = typeof AttachmentServiceService;
export const AttachmentServiceService = {
  create: {
    path: "/AttachmentService/create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAttachReq) => Buffer.from(CreateAttachReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateAttachReq.decode(value),
    responseSerialize: (value: CreateAttachRes) => Buffer.from(CreateAttachRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateAttachRes.decode(value),
  },
  all: {
    path: "/AttachmentService/all",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAttachReq) => Buffer.from(GetAllAttachReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllAttachReq.decode(value),
    responseSerialize: (value: GetAllAttachRes) => Buffer.from(GetAllAttachRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllAttachRes.decode(value),
  },
} as const;

export interface AttachmentServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateAttachReq, CreateAttachRes>;
  all: handleUnaryCall<GetAllAttachReq, GetAllAttachRes>;
}

export interface AttachmentServiceClient extends Client {
  create(
    request: CreateAttachReq,
    callback: (error: ServiceError | null, response: CreateAttachRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreateAttachReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateAttachRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreateAttachReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateAttachRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllAttachReq,
    callback: (error: ServiceError | null, response: GetAllAttachRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllAttachReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAttachRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllAttachReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAttachRes) => void,
  ): ClientUnaryCall;
}

export const AttachmentServiceClient = makeGenericClientConstructor(
  AttachmentServiceService,
  "AttachmentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AttachmentServiceClient;
  service: typeof AttachmentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.14.0
// source: orgz.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Error } from "./error";
import { Any } from "./google/protobuf/any";
import { Timestamp } from "./google/protobuf/timestamp";
import { dateToReadable} from "../../grpc/util";

export const protobufPackage = "";

export interface Orgz {
  id: number;
  specs: Any | undefined;
  ownerId?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface CreateOrgzReq {
  ownerId: number;
  orgz: Orgz | undefined;
}

export interface CreateOrgzRes {
  ownerId?: number | undefined;
  orgz: Orgz | undefined;
}

export interface GetAllOrgzsReq {
  ownerId?: number | undefined;
}

export interface GetAllOrgzsRes {
  orgzs: Orgz[];
  error?: Error | undefined;
}

export function createBaseOrgz(): Orgz {
  return { id: 0, specs: undefined, ownerId: undefined, createdAt: undefined, updatedAt: undefined };
}

export const Orgz = {
  encode(message: Orgz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.specs !== undefined) {
      Any.encode(message.specs, writer.uint32(18).fork()).ldelim();
    }
    if (message.ownerId !== undefined) {
      writer.uint32(24).int32(message.ownerId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Orgz {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrgz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.specs = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ownerId = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Orgz {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      specs: isSet(object.specs) ? Any.fromJSON(object.specs) : undefined,
      ownerId: isSet(object.ownerId) ? globalThis.Number(object.ownerId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Orgz): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.specs !== undefined) {
      obj.specs = Any.toJSON(message.specs);
    }
    if (message.ownerId !== undefined) {
      obj.ownerId = Math.round(message.ownerId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = dateToReadable(message.createdAt.toISOString());
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = dateToReadable(message.updatedAt.toISOString());
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Orgz>, I>>(base?: I): Orgz {
    return Orgz.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Orgz>, I>>(object: I): Orgz {
    const message = createBaseOrgz();
    message.id = object.id ?? 0;
    message.specs = (object.specs !== undefined && object.specs !== null) ? Any.fromPartial(object.specs) : undefined;
    message.ownerId = object.ownerId ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseCreateOrgzReq(): CreateOrgzReq {
  return { ownerId: 0, orgz: undefined };
}

export const CreateOrgzReq = {
  encode(message: CreateOrgzReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ownerId !== 0) {
      writer.uint32(8).int32(message.ownerId);
    }
    if (message.orgz !== undefined) {
      Orgz.encode(message.orgz, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrgzReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrgzReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ownerId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orgz = Orgz.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrgzReq {
    return {
      ownerId: isSet(object.ownerId) ? globalThis.Number(object.ownerId) : 0,
      orgz: isSet(object.orgz) ? Orgz.fromJSON(object.orgz) : undefined,
    };
  },

  toJSON(message: CreateOrgzReq): unknown {
    const obj: any = {};
    if (message.ownerId !== 0) {
      obj.ownerId = Math.round(message.ownerId);
    }
    if (message.orgz !== undefined) {
      obj.orgz = Orgz.toJSON(message.orgz);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrgzReq>, I>>(base?: I): CreateOrgzReq {
    return CreateOrgzReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrgzReq>, I>>(object: I): CreateOrgzReq {
    const message = createBaseCreateOrgzReq();
    message.ownerId = object.ownerId ?? 0;
    message.orgz = (object.orgz !== undefined && object.orgz !== null) ? Orgz.fromPartial(object.orgz) : undefined;
    return message;
  },
};

function createBaseCreateOrgzRes(): CreateOrgzRes {
  return { ownerId: undefined, orgz: undefined };
}

export const CreateOrgzRes = {
  encode(message: CreateOrgzRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ownerId !== undefined) {
      writer.uint32(8).int32(message.ownerId);
    }
    if (message.orgz !== undefined) {
      Orgz.encode(message.orgz, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrgzRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrgzRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ownerId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orgz = Orgz.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrgzRes {
    return {
      ownerId: isSet(object.ownerId) ? globalThis.Number(object.ownerId) : undefined,
      orgz: isSet(object.orgz) ? Orgz.fromJSON(object.orgz) : undefined,
    };
  },

  toJSON(message: CreateOrgzRes): unknown {
    const obj: any = {};
    if (message.ownerId !== undefined) {
      obj.ownerId = Math.round(message.ownerId);
    }
    if (message.orgz !== undefined) {
      obj.orgz = Orgz.toJSON(message.orgz);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrgzRes>, I>>(base?: I): CreateOrgzRes {
    return CreateOrgzRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrgzRes>, I>>(object: I): CreateOrgzRes {
    const message = createBaseCreateOrgzRes();
    message.ownerId = object.ownerId ?? undefined;
    message.orgz = (object.orgz !== undefined && object.orgz !== null) ? Orgz.fromPartial(object.orgz) : undefined;
    return message;
  },
};

function createBaseGetAllOrgzsReq(): GetAllOrgzsReq {
  return { ownerId: undefined };
}

export const GetAllOrgzsReq = {
  encode(message: GetAllOrgzsReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ownerId !== undefined) {
      writer.uint32(8).int32(message.ownerId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllOrgzsReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllOrgzsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ownerId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllOrgzsReq {
    return { ownerId: isSet(object.ownerId) ? globalThis.Number(object.ownerId) : undefined };
  },

  toJSON(message: GetAllOrgzsReq): unknown {
    const obj: any = {};
    if (message.ownerId !== undefined) {
      obj.ownerId = Math.round(message.ownerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllOrgzsReq>, I>>(base?: I): GetAllOrgzsReq {
    return GetAllOrgzsReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllOrgzsReq>, I>>(object: I): GetAllOrgzsReq {
    const message = createBaseGetAllOrgzsReq();
    message.ownerId = object.ownerId ?? undefined;
    return message;
  },
};

function createBaseGetAllOrgzsRes(): GetAllOrgzsRes {
  return { orgzs: [], error: undefined };
}

export const GetAllOrgzsRes = {
  encode(message: GetAllOrgzsRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orgzs) {
      Orgz.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllOrgzsRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllOrgzsRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgzs.push(Orgz.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllOrgzsRes {
    return {
      orgzs: globalThis.Array.isArray(object?.orgzs) ? object.orgzs.map((e: any) => Orgz.fromJSON(e)) : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAllOrgzsRes): unknown {
    const obj: any = {};
    if (message.orgzs?.length) {
      obj.orgzs = message.orgzs.map((e) => Orgz.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllOrgzsRes>, I>>(base?: I): GetAllOrgzsRes {
    return GetAllOrgzsRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllOrgzsRes>, I>>(object: I): GetAllOrgzsRes {
    const message = createBaseGetAllOrgzsRes();
    message.orgzs = object.orgzs?.map((e) => Orgz.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

export type OrgzServiceService = typeof OrgzServiceService;
export const OrgzServiceService = {
  create: {
    path: "/OrgzService/create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateOrgzReq) => Buffer.from(CreateOrgzReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateOrgzReq.decode(value),
    responseSerialize: (value: CreateOrgzRes) => Buffer.from(CreateOrgzRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateOrgzRes.decode(value),
  },
  all: {
    path: "/OrgzService/all",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllOrgzsReq) => Buffer.from(GetAllOrgzsReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllOrgzsReq.decode(value),
    responseSerialize: (value: GetAllOrgzsRes) => Buffer.from(GetAllOrgzsRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllOrgzsRes.decode(value),
  },
} as const;

export interface OrgzServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateOrgzReq, CreateOrgzRes>;
  all: handleUnaryCall<GetAllOrgzsReq, GetAllOrgzsRes>;
}

export interface OrgzServiceClient extends Client {
  create(
    request: CreateOrgzReq,
    callback: (error: ServiceError | null, response: CreateOrgzRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreateOrgzReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateOrgzRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreateOrgzReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateOrgzRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllOrgzsReq,
    callback: (error: ServiceError | null, response: GetAllOrgzsRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllOrgzsReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllOrgzsRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllOrgzsReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllOrgzsRes) => void,
  ): ClientUnaryCall;
}

export const OrgzServiceClient = makeGenericClientConstructor(OrgzServiceService, "OrgzService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OrgzServiceClient;
  service: typeof OrgzServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v3.14.0
// source: payment.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Address } from "./address";
import { Any } from "./google/protobuf/any";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "";

export enum PaymentStatus {
  PAYMENT_DEFAULT = 0,
  PAYMENT_PENDING = 1,
  PAYMENT_PAID = 2,
  UNRECOGNIZED = -1,
}

export function paymentStatusFromJSON(object: any): PaymentStatus {
  switch (object) {
    case 0:
    case "PAYMENT_DEFAULT":
      return PaymentStatus.PAYMENT_DEFAULT;
    case 1:
    case "PAYMENT_PENDING":
      return PaymentStatus.PAYMENT_PENDING;
    case 2:
    case "PAYMENT_PAID":
      return PaymentStatus.PAYMENT_PAID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentStatus.UNRECOGNIZED;
  }
}

export function paymentStatusToJSON(object: PaymentStatus): string {
  switch (object) {
    case PaymentStatus.PAYMENT_DEFAULT:
      return "PAYMENT_DEFAULT";
    case PaymentStatus.PAYMENT_PENDING:
      return "PAYMENT_PENDING";
    case PaymentStatus.PAYMENT_PAID:
      return "PAYMENT_PAID";
    case PaymentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PurshasedItem {
  id: number;
  props?: Any | undefined;
}

export interface Purshase {
  id: number;
  items: PurshasedItem[];
  userId?: number | undefined;
  paymentId?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface Payment {
  id: number;
  title: string;
  date: string;
  status: PaymentStatus;
  amount: number;
  currency: string;
  address: Address | undefined;
  transR: string;
  userId: number;
}

export interface PaymentResult {
  paymentId: number;
  result?: Any | undefined;
}

function createBasePurshasedItem(): PurshasedItem {
  return { id: 0, props: undefined };
}

export const PurshasedItem = {
  encode(message: PurshasedItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.props !== undefined) {
      Any.encode(message.props, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PurshasedItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurshasedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.props = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurshasedItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      props: isSet(object.props) ? Any.fromJSON(object.props) : undefined,
    };
  },

  toJSON(message: PurshasedItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.props !== undefined) {
      obj.props = Any.toJSON(message.props);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PurshasedItem>, I>>(base?: I): PurshasedItem {
    return PurshasedItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PurshasedItem>, I>>(object: I): PurshasedItem {
    const message = createBasePurshasedItem();
    message.id = object.id ?? 0;
    message.props = (object.props !== undefined && object.props !== null) ? Any.fromPartial(object.props) : undefined;
    return message;
  },
};

function createBasePurshase(): Purshase {
  return { id: 0, items: [], userId: undefined, paymentId: undefined, createdAt: undefined, updatedAt: undefined };
}

export const Purshase = {
  encode(message: Purshase, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    for (const v of message.items) {
      PurshasedItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.userId !== undefined) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.paymentId !== undefined) {
      writer.uint32(32).int32(message.paymentId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Purshase {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurshase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(PurshasedItem.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.paymentId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Purshase {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => PurshasedItem.fromJSON(e)) : [],
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : undefined,
      paymentId: isSet(object.paymentId) ? globalThis.Number(object.paymentId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Purshase): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => PurshasedItem.toJSON(e));
    }
    if (message.userId !== undefined) {
      obj.userId = Math.round(message.userId);
    }
    if (message.paymentId !== undefined) {
      obj.paymentId = Math.round(message.paymentId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Purshase>, I>>(base?: I): Purshase {
    return Purshase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Purshase>, I>>(object: I): Purshase {
    const message = createBasePurshase();
    message.id = object.id ?? 0;
    message.items = object.items?.map((e) => PurshasedItem.fromPartial(e)) || [];
    message.userId = object.userId ?? undefined;
    message.paymentId = object.paymentId ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBasePayment(): Payment {
  return { id: 0, title: "", date: "", status: 0, amount: 0, currency: "", address: undefined, transR: "", userId: 0 };
}

export const Payment = {
  encode(message: Payment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.date !== "") {
      writer.uint32(26).string(message.date);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.amount !== 0) {
      writer.uint32(40).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(50).string(message.currency);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(58).fork()).ldelim();
    }
    if (message.transR !== "") {
      writer.uint32(66).string(message.transR);
    }
    if (message.userId !== 0) {
      writer.uint32(72).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Payment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.date = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.amount = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.currency = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.transR = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      transR: isSet(object.transR) ? globalThis.String(object.transR) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.transR !== "") {
      obj.transR = message.transR;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payment>, I>>(base?: I): Payment {
    return Payment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payment>, I>>(object: I): Payment {
    const message = createBasePayment();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.date = object.date ?? "";
    message.status = object.status ?? 0;
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.transR = object.transR ?? "";
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBasePaymentResult(): PaymentResult {
  return { paymentId: 0, result: undefined };
}

export const PaymentResult = {
  encode(message: PaymentResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.paymentId !== 0) {
      writer.uint32(8).int32(message.paymentId);
    }
    if (message.result !== undefined) {
      Any.encode(message.result, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PaymentResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.paymentId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentResult {
    return {
      paymentId: isSet(object.paymentId) ? globalThis.Number(object.paymentId) : 0,
      result: isSet(object.result) ? Any.fromJSON(object.result) : undefined,
    };
  },

  toJSON(message: PaymentResult): unknown {
    const obj: any = {};
    if (message.paymentId !== 0) {
      obj.paymentId = Math.round(message.paymentId);
    }
    if (message.result !== undefined) {
      obj.result = Any.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentResult>, I>>(base?: I): PaymentResult {
    return PaymentResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentResult>, I>>(object: I): PaymentResult {
    const message = createBasePaymentResult();
    message.paymentId = object.paymentId ?? 0;
    message.result = (object.result !== undefined && object.result !== null)
      ? Any.fromPartial(object.result)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

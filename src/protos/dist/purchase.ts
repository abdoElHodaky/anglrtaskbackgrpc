// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.19.6
// source: purchase.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Error } from "./error";
import { Any } from "./google/protobuf/any";
import { Timestamp } from "./google/protobuf/timestamp";
import { dateToReadable} from "../../grpc/util";

export const protobufPackage = "";

export interface PurshasedItem {
  id: number;
  props?: Any | undefined;
  productId?: number | undefined;
}

export interface Purshase {
  id: number;
  items: PurshasedItem[];
  userId?: number | undefined;
  paymentId?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface GetAllPurshaseReq {
  userId: number;
}

export interface GetAllPurshaseRes {
  userId: number;
  purchases: Purshase[];
  error?: Error | undefined;
}

export interface CreatePurshaseReq {
  userId?: number | undefined;
  items: PurshasedItem[];
}

export interface CreatePurshaseRes {
  purchase: Purshase | undefined;
}

function createBasePurshasedItem(): PurshasedItem {
  return { id: 0, props: undefined, productId: undefined };
}

export const PurshasedItem = {
  encode(message: PurshasedItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.props !== undefined) {
      Any.encode(message.props, writer.uint32(18).fork()).ldelim();
    }
    if (message.productId !== undefined) {
      writer.uint32(24).int32(message.productId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PurshasedItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurshasedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.props = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.productId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurshasedItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      props: isSet(object.props) ? Any.fromJSON(object.props) : undefined,
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : undefined,
    };
  },

  toJSON(message: PurshasedItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.props !== undefined) {
      obj.props = Any.toJSON(message.props);
    }
    if (message.productId !== undefined) {
      obj.productId = Math.round(message.productId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PurshasedItem>, I>>(base?: I): PurshasedItem {
    return PurshasedItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PurshasedItem>, I>>(object: I): PurshasedItem {
    const message = createBasePurshasedItem();
    message.id = object.id ?? 0;
    message.props = (object.props !== undefined && object.props !== null) ? Any.fromPartial(object.props) : undefined;
    message.productId = object.productId ?? undefined;
    return message;
  },
};

function createBasePurshase(): Purshase {
  return { id: 0, items: [], userId: undefined, paymentId: undefined, createdAt: undefined, updatedAt: undefined };
}

export const Purshase = {
  encode(message: Purshase, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    for (const v of message.items) {
      PurshasedItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.userId !== undefined) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.paymentId !== undefined) {
      writer.uint32(32).int32(message.paymentId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Purshase {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurshase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(PurshasedItem.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.paymentId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Purshase {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => PurshasedItem.fromJSON(e)) : [],
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : undefined,
      paymentId: isSet(object.paymentId) ? globalThis.Number(object.paymentId) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Purshase): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => PurshasedItem.toJSON(e));
    }
    if (message.userId !== undefined) {
      obj.userId = Math.round(message.userId);
    }
    if (message.paymentId !== undefined) {
      obj.paymentId = Math.round(message.paymentId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = dateToReadable( message.createdAt.toISOString());
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt =dateToReadable( message.updatedAt.toISOString());
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Purshase>, I>>(base?: I): Purshase {
    return Purshase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Purshase>, I>>(object: I): Purshase {
    const message = createBasePurshase();
    message.id = object.id ?? 0;
    message.items = object.items?.map((e) => PurshasedItem.fromPartial(e)) || [];
    message.userId = object.userId ?? undefined;
    message.paymentId = object.paymentId ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseGetAllPurshaseReq(): GetAllPurshaseReq {
  return { userId: 0 };
}

export const GetAllPurshaseReq = {
  encode(message: GetAllPurshaseReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllPurshaseReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPurshaseReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPurshaseReq {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: GetAllPurshaseReq): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPurshaseReq>, I>>(base?: I): GetAllPurshaseReq {
    return GetAllPurshaseReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPurshaseReq>, I>>(object: I): GetAllPurshaseReq {
    const message = createBaseGetAllPurshaseReq();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseGetAllPurshaseRes(): GetAllPurshaseRes {
  return { userId: 0, purchases: [], error: undefined };
}

export const GetAllPurshaseRes = {
  encode(message: GetAllPurshaseRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    for (const v of message.purchases) {
      Purshase.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllPurshaseRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPurshaseRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.purchases.push(Purshase.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPurshaseRes {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      purchases: globalThis.Array.isArray(object?.purchases)
        ? object.purchases.map((e: any) => Purshase.fromJSON(e))
        : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAllPurshaseRes): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.purchases?.length) {
      obj.purchases = message.purchases.map((e) => Purshase.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPurshaseRes>, I>>(base?: I): GetAllPurshaseRes {
    return GetAllPurshaseRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPurshaseRes>, I>>(object: I): GetAllPurshaseRes {
    const message = createBaseGetAllPurshaseRes();
    message.userId = object.userId ?? 0;
    message.purchases = object.purchases?.map((e) => Purshase.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreatePurshaseReq(): CreatePurshaseReq {
  return { userId: undefined, items: [] };
}

export const CreatePurshaseReq = {
  encode(message: CreatePurshaseReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== undefined) {
      writer.uint32(8).int32(message.userId);
    }
    for (const v of message.items) {
      PurshasedItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePurshaseReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePurshaseReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(PurshasedItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePurshaseReq {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : undefined,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => PurshasedItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreatePurshaseReq): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = Math.round(message.userId);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => PurshasedItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePurshaseReq>, I>>(base?: I): CreatePurshaseReq {
    return CreatePurshaseReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePurshaseReq>, I>>(object: I): CreatePurshaseReq {
    const message = createBaseCreatePurshaseReq();
    message.userId = object.userId ?? undefined;
    message.items = object.items?.map((e) => PurshasedItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePurshaseRes(): CreatePurshaseRes {
  return { purchase: undefined };
}

export const CreatePurshaseRes = {
  encode(message: CreatePurshaseRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.purchase !== undefined) {
      Purshase.encode(message.purchase, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreatePurshaseRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePurshaseRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.purchase = Purshase.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePurshaseRes {
    return { purchase: isSet(object.purchase) ? Purshase.fromJSON(object.purchase) : undefined };
  },

  toJSON(message: CreatePurshaseRes): unknown {
    const obj: any = {};
    if (message.purchase !== undefined) {
      obj.purchase = Purshase.toJSON(message.purchase);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePurshaseRes>, I>>(base?: I): CreatePurshaseRes {
    return CreatePurshaseRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePurshaseRes>, I>>(object: I): CreatePurshaseRes {
    const message = createBaseCreatePurshaseRes();
    message.purchase = (object.purchase !== undefined && object.purchase !== null)
      ? Purshase.fromPartial(object.purchase)
      : undefined;
    return message;
  },
};

export type PurshaseServiceService = typeof PurshaseServiceService;
export const PurshaseServiceService = {
  all: {
    path: "/PurshaseService/all",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllPurshaseReq) => Buffer.from(GetAllPurshaseReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllPurshaseReq.decode(value),
    responseSerialize: (value: GetAllPurshaseRes) => Buffer.from(GetAllPurshaseRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllPurshaseRes.decode(value),
  },
  create: {
    path: "/PurshaseService/create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePurshaseReq) => Buffer.from(CreatePurshaseReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreatePurshaseReq.decode(value),
    responseSerialize: (value: CreatePurshaseRes) => Buffer.from(CreatePurshaseRes.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreatePurshaseRes.decode(value),
  },
} as const;

export interface PurshaseServiceServer extends UntypedServiceImplementation {
  all: handleUnaryCall<GetAllPurshaseReq, GetAllPurshaseRes>;
  create: handleUnaryCall<CreatePurshaseReq, CreatePurshaseRes>;
}

export interface PurshaseServiceClient extends Client {
  all(
    request: GetAllPurshaseReq,
    callback: (error: ServiceError | null, response: GetAllPurshaseRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllPurshaseReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllPurshaseRes) => void,
  ): ClientUnaryCall;
  all(
    request: GetAllPurshaseReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllPurshaseRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreatePurshaseReq,
    callback: (error: ServiceError | null, response: CreatePurshaseRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreatePurshaseReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreatePurshaseRes) => void,
  ): ClientUnaryCall;
  create(
    request: CreatePurshaseReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreatePurshaseRes) => void,
  ): ClientUnaryCall;
}

export const PurshaseServiceClient = makeGenericClientConstructor(
  PurshaseServiceService,
  "PurshaseService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PurshaseServiceClient;
  service: typeof PurshaseServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
